Using ‘Gatsby.txt’ as the input file and the encoding file: Encoding1
	Input File Size: 2,286,456 bits
	Output File Size: 1,319,653 bits
	Savings: 966,803 bits

Using ‘Gatsby.txt’ as the input file and ‘Dictionary_rev.txt’ as the encoding file: Encoding2
	Input file size: 2,286,456 bits
	Output File Size: 1,414,762 bits
	Savings: 871,694 bits

Analysis:
The compressed encodings are smaller in size than the original uncompressed file because in the original file, every character is represented with eight bits. However in the compressed file, characters are represented with different length encodings. Through the process of Huffman encoding, the characters that appear more frequently in the original file are assigned shorter codes, and the shorter the code, the less space is taken, so the more dominant characters take up less space than the less frequent. For example, if ‘r’ appears 10 times in the original file, and ’t’ appears 1 time, the encoding for ‘r’ will be the same as the encoding for ’t’, and will take up the same amount of space, where the combined size of these characters is 88 bits. However using Huffman encoding, because ‘r’ appears significantly more than ’t’, it is assigned a shorter encoding and therefore takes up less space, and ’t’ is assigned a longer encoding because it does not appear as often. Let’s say in the Huffman encoding ‘r’ takes up 4 bits and ’t’ takes up 20 bits. The total space taken by these bits is 60 bits. Even though the encoding for ’t’ is much longer than in the original, because it doesn’t appear often and because ‘r’ repeats more often and takes up less space, the space taken by these characters is lower than it was in the original.
Comparing the encodings, we see that Encoding1 is about 100,000 bits smaller than Encoding2, and so is a more preferable Encoding. The reason it is smaller is because the characters in the encoding file of Encoding2 have a different frequency than they do in the encoding file of Encoding1 ie. the characters in the dictionary have a different frequency than they do in Gatsby. In the dictionary, a character might not appear often relative to the frequencies of other characters in the dictionary, however the same character may appear very often in Gatsby. In this situation, the character would receive a longer encoding because it did not appear often in the dictionary, but since the character did appear more often in Gatsby, the longer encoding would be printed very often, thus taking up a lot of space. If encoding was done with Gatsby, the encoding for the character would be shorter because it appeared more frequently. But the main idea is that changing the encoding file changes the Huffman tree generated, and since the Huffman tree is based on frequencies and those frequencies do not apply to the document you want to encode, the encoding will likely not be optimal.